<!-- Instructor View with Settings cog -->
<div class="page">
    <div style="position:relative;">
        <div id="cog" data-toggle="modal" href="#content-configuration" style="position:absolute; top:10; z-index:950; padding-left:10px;">
            <a data-toggle="tooltip" title="Settings" data-placement="bottom"><i class="icon-cog"></i></a>
        </div>
        <div style="z-index:10; padding-left:30px;">
            <h3>Instructor view</h3>
        </div>
    </div>

    
    <div class="rightcolm">
        <div id="tabs">
            <ul id="tablist">
                <!-- Insert new tabs -->
            </ul>
            <div id="tabdy">
                <!-- Insert tab body content -->
            </div>
            <div><!-- scroll arrows -->
                <span id="arrowleft" class="arol"></span>
                <span id="arrowright" class="aror"></span>
            </div>
        </div>
    </div>
</div>

<!-- Configuration modal with Front End Form and Instructions in tabs -->
<div class="control-popup modal fade" id="content-configuration" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content" style="width:800px; overflow-y: auto;">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Component Settings</h4>
            </div>
            <div class="modal-body">
                <!-- Tabs -->
                <ul class="nav nav-tabs">
                  <li class="active"><a data-toggle="tab" href="#configure">Configure</a></li>
                  <li><a data-toggle="tab" href="#instruct">Instructions</a></li>
                </ul>
                <div class="tab-content">
                <!-- Configure instance -->
                  <div id="configure" class="tab-pane fade in active" style="padding: 5px 0px;">
                    <form role="form" id="updateForm"
                      data-request="{{ __SELF__ }}::onUpdate"
                      data-request-success="$el.hide();completed(data);">
                        {{ form.formRender()|raw }}
                      <div class="form-group">
                         <button class="btn btn-primary btn-block btn-md" type="submit" value="register">Update Component</button>
                      </div>
                    </form>
                  </div>
                <!-- Instructions -->
                  <div id="instruct" class="tab-pane fade in" style="padding: 0px 20px;">
                      {{ instructions|raw }}
                  </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal: when module is clicked show items in module -->
<div class="control-popup modal fade" id="itemdetails" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 id="detailed-title" class="modal-title">Item Details</h4>
            </div>
            <div id="detailed-body" class="modal-body">
                <p>This displays details of module</p>
            </div>
        </div>
    </div>
</div>

<script>
(function() {
    
	var configVal=[config.name];
	var fieldIDs=['Form-field-Modulemap-name'];
	
    /* set id,course,copy in the POST they are not editable
        Add hidden input fields so they will transfer to onUpdate
        fields.yaml is set to hidden: true so they do not appear at all
    */
    $('#Form-outsideTabs').append('<input type="hidden" name="Modulemap[id]" value="'+config.id+'" /> ');
    $('#Form-outsideTabs').append('<input type="hidden" name="Modulemap[course_id]" value="'+config.course_id+'" /> ');
    $('#Form-outsideTabs').append('<input type="hidden" name="Modulemap[copy_id]" value="'+config.copy_id+'" /> ');
    
    //fill the form with current configuration
    for(var f=0; f<configVal.length; f++) {
       $('#'+fieldIDs[f]).val(configVal[f]);
    }
    
	function completed(data)
	{
        /* updated record is returned */
        location.reload();
	}
	//console.log('instance:'+config.id,config.name,config.course_id,config.copy_id);
    //  DONT NEED TO EDIT FORM - REMOVE? ONLY Instructions needed! which is part of FORM partial?
    /*
        Bird of Paradise:
        
        http://getbootstrap.com/javascript/
        http://getbootstrap.com/components/#nav
        
        http://daftspunk.github.io/Font-Autumn/    icon-star, star-half-o, star-o, icon-lock
        http://api.jqueryui.com/category/interactions/
        https://api.jqueryui.com/draggable/
        http://api.jqueryui.com/sortable/
        Change to Bootstrap nav ... https://jqueryui.com/tabs/
        
        todo: Deep search, Scroll arrows, Locked, 
        Tooltip? for reason locked prerequisites
        Stars, images?
        
        assignment links in locked modules are disabled for student view
    */

    // store individual module objects
    var modobjs = [];
    
    //todo: edit {label} = units[index].name
    var tabTitle = $( "#tab_title" ),
    tabContent = $( "#tab_content" ),
    tabCounter = 0;// not 0 based
    // cog to edit unit[].name
    var tabTemplate = "<li><a href='#{href}'>#{label}</a>";
        tabTemplate +="</li>";
    
    
    // create units and modules from data
    for(var m=0; m<moduledata.length; m++) {
        
        var chld = moduledata[m]['children'];
        for(var c=0; c<chld.length; c++) {
            var tabname=chld[c].name;
            addTab(tabname);// each unit
            // add moditem for each chld[c].module_item
            
            var nuplace = $('#tab_'+c+'body');
            var widt = $(nuplace).width();// increase for each new module
            var mods = chld[c].children;
            var leng = mods.length;
            var modlist = [];// modules in this tab
    //do this in Modulemap after getModules in another function ?
            for(var i=0; i<leng; i++) {
                // individual module objects for searching items
                modobjs.push(mods[i]);// all
                modlist.push(mods[i]);// modules in this tab
                // if module has children add it
                if(mods[i].children.length > 0 ) {
                    var len = mods[i].children.length;
                    console.log(mods[i].name+' children: '+len);
                     
                    //DEEP CHILDREN: $.each(  http://api.jquery.com/category/utilities/
                    
                    //insert into other array
                    for(var mc=0; mc<len; mc++) {
                        // & child of child of child ?
                        modobjs.push(mods[i].children[mc]);
                        modlist.push(mods[i].children[mc]);
                    }
                }
            }
            // then display array
            for(i=0; i<modlist.length; i++) {
                
                //is sortable 
            var modbox = '<div id="'+modlist[i].module_id+'" class="moditem" data-locked="'+modlist[i].locked+'">';
                modbox +='<div class="title">'+modlist[i].name+'</div>';
                modbox +='<div class="items">Items: '+modlist[i].items_count+'</div>';
                modbox +='<div class="items">'+modlist[i].module_id+'</div>';// testing
                modbox +='<div class="items">Locked: '+modlist[i].locked+'</div>';
                // + cog edit { image upload? }
                modbox +='</div>';
                
                if(i > 2) {
                    widt += 170;// width of moditem Constant
                    $(nuplace).css({ 'width': widt});// , 'overflow-x': 'auto' });
                    $(nuplace).parent().css({'overflow-x': 'auto' });// id=tab_#
                    //console.log('width:',widt);
                }
                
                $(nuplace).append(modbox);
            }
        }
    }
    
    
    // jquery-UI tabs use bootstrap nav-tabs
	var tabs = $( "#tabs" ).tabs({
        //event: "click"
        //collapsible: false
    });
    
    var activeTab='tab_0';
    
    function addTab(tabname) {
        
        var label = tabname;
            id = "tab_" + tabCounter,
            li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
            tabContentHtml = "<div id='" + id + "'><div id='tab_"+tabCounter+"body' class='tabody'></div></div>";
        
        $('#tablist').append(li);
        $('#tabdy').append(tabContentHtml);
        
        ////dragcontainer.push([0,0,650,0]);//for each tab
        ////tabscrol.draggable("option", "containment", dragcontainer[tabCounter-1]);
        // may have to rethink this. Should have horizontal scroll anyway
        tabCounter++;
        
        // (do bootstrap version)
        
    }
    
    /* click module */
    $('.moditem').on('click', function(){
        console.log( $(this).attr('id') );
        
        var modid = $(this).attr('id');
        var mod = $.grep(modobjs, function(elem,index){
            return elem.module_id == modid;
        });
        console.log(modid, mod[0].name, mod);
        var moditems= mod[0].module_items;
        //console.log(modobjs);
        console.log('moditems:',moditems);
        // display in modal detailed-body
        
        $('#detailed-body').empty();
        for(var i=0; i<moditems.length; i++) {
            
            var item='<div class="">';// create one still
                //item+='<a target="_blank" href="'+moditems[i].html_url+'?module_item_id='+moditems[i].module_item_id+'" target="_blank">'+moditems[i].title+'</a>';
                item+='<a target="_blank" href="'+moditems[i].html_url+'" target="_blank">'+moditems[i].title+'</a>';
                if(moditems[i].content.length > 0) {
                    item+=' worth: '+moditems[i].content[0].points_possible;
                }
                item+='</div>';
            $('#detailed-body').append(item);
            
        }
        
        // trigger modal
        $('#detailed-title').html(mod[0].name);
        $('#itemdetails').modal('show');
    });

    
    $('.aror').on('mouseenter', function(){
        var activeTab = $('li.ui-state-active').attr('aria-controls');
        var sat = $('#'+activeTab).scrollLeft();
        $('#'+activeTab).animate({ scrollLeft:sat+150 });
    
    });
    $('.arol').on('mouseenter', function(){
        var activeTab = $('li.ui-state-active').attr('aria-controls');
        var sat = $('#'+activeTab).scrollLeft();
        $('#'+activeTab).animate({ scrollLeft:sat-150 });
    });
// test:
/*
    var chmods = [];
    findNested(moduledata[0].children, 'children', chmods );
    function findNested(obj, key, memo) {
      var i,
          proto = Object.prototype,
          ts = proto.toString,
          hasOwn = proto.hasOwnProperty.bind(obj);

      if ('[object Array]' !== ts.call(memo)) memo = [];

      for (i in obj) {
        if (hasOwn(i)) {
          if (i === key) {
            memo.push(obj[i]);
          } else if ('[object Array]' === ts.call(obj[i]) || '[object Object]' === ts.call(obj[i])) {
            findNested(obj[i], key, memo);
          }
        }
      }

      return memo;
    }
console.log('chmods:',chmods);
*/
/*
//http://stackoverflow.com/questions/15642494/find-property-by-name-in-a-deep-object
//this will deep search an array of objects (hay) for a value (needle) then return an array with the results.
    var cnmods = [];// 0
    search(moduledata[0], 'children', cnmods);
    //search = function(moduledata, 'children', cmods) {
    function search(hay,needle,accumulator) {
      var accumulator = accumulator || [];
        //console.log('type: '+typeof hay);// object,number or string
      if (typeof hay == 'object') {
        for (var i in hay) {
          search(hay[i], needle, accumulator) == true ? accumulator.push(hay) : 1;
        }
      }
      //return new RegExp(needle).test(hay) || accumulator;
        return accumulator;
    }
   console.log('cnmods:', cnmods.length, cnmods); 
*/
    
//http://stackoverflow.com/questions/15523514/find-by-key-deep-in-nested-json-object
    var cmods = [];
    getChildren(moduledata);// close: refine this
    
    function getChildren(theObj) {
        var result = null;
        for(var i=0; i<theObj.length; i++) {
            var cobj = theObj[i].children;
            if(cobj.length > 0) {
                console.log('children: '+cobj.length);
                cmods.push(theObj[i].children);// to global
                result = getChildren(theObj[i].children);
                if(result) { break; }
            }
            
        }
        return result;
    }
    
    console.log('cmods:', cmods.length, cmods);
    
})();
</script>
