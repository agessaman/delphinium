<!-- Instructor View with Settings cog -->
<div class="page">
    <div style="position:relative;">
        <div id="cog" data-toggle="modal" href="#content-configuration" style="position:absolute; top:0; z-index:950; padding-left:220px;">
            <a data-toggle="tooltip" title="Settings" data-placement="bottom"><i class="icon-cog"></i></a>
        </div>
        <div style="padding:10px;">
            <h3>Instructor view</h3>
        </div>
    </div>

    <div class="leftcolm">
    <!-- modules list -->
    </div>
    
    <div class="rightcolm">
        <div class="dropzone"></div>
        <button id="addTab" class="btn btn-success" type="button">+ New Unit</button>
        <div id="tabs">
          <ul id="tablist">
            <li><a href="#tab_1">Unit 1</a></li>
              <!-- Insert new tabs -->
          </ul>
          <div id="tab_1"><div id="tab_1body" class="tabody ui-state-default"></div></div>
          <!-- Insert tab content -->

        </div>
        <div><strong>Instructions: </strong>Drag a module from the left onto the unit. Add new units as needed.
        </div>
    </div>
</div>

<!-- Configuration modal with Front End Form and Instructions in tabs -->
<div class="control-popup modal fade" id="content-configuration" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content" style="width:800px; overflow-y: auto;">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Component Settings</h4>
            </div>
            <div class="modal-body">
                <!-- Tabs -->
                <ul class="nav nav-tabs">
                  <li class="active"><a data-toggle="tab" href="#configure">Configure</a></li>
                  <li><a data-toggle="tab" href="#instruct">Instructions</a></li>
                </ul>
                <div class="tab-content">
                <!-- Configure instance -->
                  <div id="configure" class="tab-pane fade in active" style="padding: 5px 0px;">
                    <form role="form" id="updateForm"
                      data-request="{{ __SELF__ }}::onUpdate"
                      data-request-success="$el.hide();completed(data);">
                        {{ form.formRender()|raw }}
                      <div class="form-group">
                         <button class="btn btn-primary btn-block btn-md" type="submit" value="register">Update Component</button>
                      </div>
                    </form>
                  </div>
                <!-- Instructions -->
                  <div id="instruct" class="tab-pane fade in" style="padding: 0px 20px;">
                      {{ instructions|raw }}
                  </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
(function() {
    
	var configVal=[config.name,config.units,config.modules];
	var fieldIDs=['Form-field-Modulemap-name','Form-field-Modulemap-units','Form-field-Modulemap-modules'];
	
    /* set id,course,copy in the POST they are not editable
        Add hidden input fields so they will transfer to onUpdate
        fields.yaml is set to hidden: true so they do not appear at all
    */
    $('#Form-outsideTabs').append('<input type="hidden" name="Modulemap[id]" value="'+config.id+'" /> ');
    $('#Form-outsideTabs').append('<input type="hidden" name="Modulemap[course_id]" value="'+config.course_id+'" /> ');
    $('#Form-outsideTabs').append('<input type="hidden" name="Modulemap[copy_id]" value="'+config.copy_id+'" /> ');
    
    // Fix Animate checkbox switch
    $('<div style="height:90px;" class="clearfix"></div>').insertBefore('.checkbox-field').parent;
	$('.checkbox-field').attr('style','margin-left:20px').removeClass('span-right').addClass('span-left');
   // $('#Form-field-Modulemap-Name-group').hide();// not useful
    
    //fill the form with current configuration
    for(var i=0; i<configVal.length; i++) {
       $('#'+fieldIDs[i]).val(configVal[i]);
    }
    
	function completed(data)
	{
        /* updated record is returned */
        location.reload();
	}
	console.log('instance:'+config.id,config.name,config.course_id,config.copy_id);
    
    /*
        Bird of Paradise:
        
        https://jqueryui.com/tabs/
        http://api.jqueryui.com/category/interactions/
        
        http://stackoverflow.com/questions/14308290/jquery-draggable-and-droppable-between-two-containers-and-sortable
        
        https://api.jqueryui.com/draggable/
        
        
        Model:
        units [ {name, order}, 
        modules [ {unit_index, mod_id, mod_order, image_url, }, 
        
        todo: construct from config
    */
    // if ! config.units
    var units = [{'name':'Unit 1', 'order': 0}];//default first tab
    var modules = [];// modules in unit tab
    
    // add, delete, edit name
    var tabTitle = $( "#tab_title" ),
    tabContent = $( "#tab_content" ),
    tabTemplate = "<li><a href='#{href}'>#{label}</a></li>",
    tabCounter = 2;// not 0 based
    
    // jquery-UI tabs
	var tabs = $( "#tabs" ).tabs({
        //event: "click"
        //collapsible: false
    });
    
    // are sortable sortable tabs
    tabs.find( ".ui-tabs-nav" ).sortable({
        axis: "x",
        stop: function() {
            tabs.tabs( "refresh" ); 
            console.log('tabs:',tabs);
            //update units.order
            
        }
    });
    
    $('#addTab').on('click',function(e) {
        e.preventDefault();
        addTab(); 
    });
    
    function addTab() {
        var label = "Unit " + tabCounter,
            id = "tab_" + tabCounter,
            li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
            tabContentHtml = "<div id='" + id + "'><div id='tab_"+tabCounter+"body' class='tabody ui-state-default'></div></div>";

        tabs.find( ".ui-tabs-nav" ).append( li );
        tabs.append( tabContentHtml );
        tabs.tabs( "refresh" );
        tabCounter++;
        // update arrays function?
        units.push({'name':"Unit " + tabCounter, 'order': tabCounter-1});
        console.log('units:',units);
        //dropzone = $('.tabody').droppable({  drop: handleDropEvent });// Not a function
    }
    
    // if ! config.modules, else hide leftcolm?
    // create draggable module elements
    for(var i=0; i<moduledata.length; i++) {
        var modbox = '<div id="'+moduledata[i].module_id+'" class="modbox modDraggable">';
            modbox +='<div class="title">'+moduledata[i].name+'</div>';
            modbox +='<div class="items">Items: '+moduledata[i].items_count+'</div>';
            modbox +='</div>';
        
        $('.leftcolm').append(modbox);
        $('.modbox').attr('data-locked',moduledata[i].locked);
    }
    
    // all module items drag to unit tab.tabody
    var modlist = $('.modDraggable').draggable({
        helper: 'clone',
        containment: '.page',
        snap: '.page',
        zIndex: 1100,
        iframeFix: true,
        distance: 10,
        start: function( event, ui ) {
            $('.dropzone').show();// $(ui.draggable).detach();
        },
        stop: function( event, ui ) {
            $('.dropzone').hide();
        },
        revertDuration: 300,
        revert: true
    });// return clone changes 
    
    // if dragged from tabody & dropped on modlist
    
    // sortable inside unit.tabody adjusts mod_order
    var sortlist = $('.itemDraggable').draggable({
        helper: 'clone',
        containment: '.rightcolm',
        snap: '.rightcolm',
        zIndex: 1100,
        iframeFix: true,
        distance: 10,
        revert: 'invalid'
    });
    //$("#sortable").sortable();
    var sortgroups = $( ".tabody" ).sortable({
		containment: "parent",
        axis: "x",
        stop: function() {
            //sortlist.draggable( "refresh" ); 
            console.log('sortlist:',sortlist);
            //update modules.mod_order by children 
            
        }
    });
   
    /*// cant do 2 another dropzone?
    var dropzone = $('.dropzone').droppable({
        accept: '.itemDraggable',
        drop: sortDropped
    });
    function sortDropped( event, ui ) {
        console.log('sort: ', ui.draggable.attr('id'));// nope
    }
    */
    // transparent zone over tab body
    $('.dropzone').hide();// show when dragging module
    var dropzone = $('.dropzone').droppable({
        accept: '.modDraggable',
        drop: handleDropEvent
    });
    function handleDropEvent( event, ui ) {
        //var offsetXPos = parseInt( ui.offset.left );// sorting???
        //var offsetYPos = parseInt( ui.offset.top );
        //console.log( event.target.id+"drop location: (" + offsetXPos + ", " + offsetYPos + ")");
        var modid = ui.draggable.attr('id');
        //console.log( 'dropped ID "' + modid + '" was dropped onto '+event.target.id );
        
        //remove mod from left column, add to active tab.tabody, change style
        // get active tab 
        var actor = $('li.ui-state-active').attr('aria-controls');
        //console.log('Active Tab:',actor);//tab_id
        // get active tabody
        var nuplace = $('#'+actor+' > div:first');// id= actor+body
        ui.helper.remove();// dont revert helper
        //http://stackoverflow.com/questions/1324044/how-do-i-disable-a-jquery-ui-draggable
        ui.draggable.draggable("destroy");// remove drag ability
        
        $(ui.draggable).detach().appendTo(nuplace);//visible .tabody
        $(ui.draggable).removeClass('modbox modDraggable').addClass('moditem ui-state-default');
        
		// add view, remove, edit icons [view & edit modal forms]
		var added = '<div class="icos center">';
			//added +='view : X : edit';// .icon-eye : .icon-close or remove : .icon-edit or .icon-pencil-square-o
			added +='<a data-toggle="tooltip" title="Remove Module" data-placement="bottom"><i class="icon-remove"></i></a>';
			added +=' : <a data-toggle="tooltip" title="View Assignments" data-placement="top"><i class="icon-eye"></i></a>';
			added +=' : <a data-toggle="tooltip" title="Settings" data-placement="top"><i class="icon-edit"></i></a>';
			added +='</div>';
		$(ui.draggable).append(added);
		
        //ui.draggable.draggable("disable", 1);// no longer draggable
        //ui.draggable.draggable({});// didnt add to itemDraggable
    //ui.draggable.draggable({ connectToSortable: "#my-sortable" });// as itemDraggable
    /*
        want to change these to sort modules type
        http://api.jqueryui.com/sortable/
		http://stackoverflow.com/questions/2544143/how-to-horizontally-sort-divs-using-sortable-in-jquery
		http://jsfiddle.net/sP3UZ/
    */
	// append to sortable
	sortgroups.sortable("refresh");
	
        // update modules[]
        var modorder = $(nuplace).children().length;// child position
        
        modules.push({"unit":actor, "mod_id":modid, "mod_order": modorder, "image_url": ""});
        //console.log('dropped modules: '+modules.length, modules);
        
        // if > 3 items on tab adjust width of tabody
        var count = $.grep(modules, function(elem, index) {
            return elem.unit == actor;
        });
        console.log('count: '+count.length, count);// modules in this tab
        
        var widt = $(nuplace).width();// increase for each new module
        if(count.length > 3) {
            widt += 200; 
            $(nuplace).css({ 'width': widt });
            console.log('width:',widt);
        }
        var sleft = widt-(670*1.5);
        dragcontainer=[-sleft,0,280,0];//update slider container in array
        //console.log('dragcontainer='+dragcontainer);
        tabscrol.draggable("option", "containment", dragcontainer);//at switch tabs too?
    }
    
    var dragcontainer=[0,0,650,0];// array for each tab!
    
    var tabscrol = $('.tabody').draggable({ axis:'x', containment:dragcontainer });
    /* slider for tabody
    //JQ.UI.draggable set limits with [x1, y1, x2, y2] or 'parent', 'document', 'window'
        var bl=0;//var bt=2;
        var sliderwidth = 650;
        console.log('sliderwidth='+sliderwidth+' bl='+bl);// bl varies
        var sleft = bl-sliderwidth;
        var dragcontainer=[-sleft,0,24,0];
        console.log('dragcontainer='+dragcontainer); 
        if(bl>sliderwidth)
        {
            scr1.css({'cursor':'ew-resize'});
            $(scr1).draggable({ axis:'x',containment:dragcontainer });
        }  // jquery.ui.touch-punch.js worked for ipad
    */
    
})();
</script>
